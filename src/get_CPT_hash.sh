#!/bin/bash

# Matthew Wyczalkowski <m.wyczalkowski@wustl.edu>
# https://dinglab.wustl.edu/


# Called after running scripts to catch fatal (exit 1) errors
# works with piped calls ( S1 | S2 | S3 > OUT )
function test_exit_status {
    # Evaluate return value for chain of pipes; see https://stackoverflow.com/questions/90418/exit-shell-script-based-on-process-exit-code
    # exit code 137 is fatal error signal 9: http://tldp.org/LDP/abs/html/exitcodes.html

    rcs=${PIPESTATUS[*]};
    for rc in ${rcs}; do
        if [[ $rc != 0 ]]; then
            >&2 echo Fatal error.  Exiting
            exit $rc;
        fi;
    done
}

# Annotation suffix is added to sample name to avoid duplicate sample names for e.g. heterogeneity 
# PREFIX is e.g., "het-", to describe the type of sample annotation
# Aliquot name is e.g., CPT0347910005
#   It is assumed it starts with CPT (warning and no suffix if it does not)
#   Underscores ("_") are removed to deal with aliquot names like CPT0088230009_1
#   ANUM is the number based on Aliquot name with CPT and any leading 0's stripped off
#   AID is generated by the hashid algoritm with ANUM as input
#       See https://github.com/benwilber/bashids
# Suffix is then a concatenation of PREFIX and AID
function get_CPT_encode {
    CPT_ID=$1

    if [[ $CPT_ID != CPT* ]] ; then
        >&2 echo WARNING: Aliquot name does not start with CPT.  Will not generate a suffix
        echo ""
        return
    fi

    ANUM=$( echo "$CPT_ID" | sed 's/^CPT//' | sed 's/^0*//' | sed 's/_//')

    CMD="$BASHID -e $ANUM"
    if [ $VERBOSE ]; then
        >&2 echo Running: $CMD
    fi

    AID=$( $CMD )
    test_exit_status
    echo $AID
}

function get_CPT_decode {
    CPT_DI=$1 

    CMD="$BASHID -d $CPT_DI"
    if [ $VERBOSE ]; then
        >&2 echo Running: $CMD
    fi

    CPT_ID=$( $CMD )
    test_exit_status
    echo $CPT_ID
}
    

read -r -d '' USAGE <<'EOF'
Obtain a unique hash of the numerical portion of a string like CPT0170510019

Usage:
  get_CPT_hash.sh [options] CPT_ID

Options:
-h: Print this help message
-v: verbose / debugging output
-d: decode into the numerical portion of the original string

Returns XXX, a hash ID generated with [bashids](https://github.com/benwilber/bashids)
Input string is the aliquot name with "CPT" and any leading 0's removed
Will return with an error 
* if "CPT" are not leading characters in CPT_ID and not decoding
* if bashids returns with an error
  * this may occur if input string is non-numeric
EOF

# Documentation for [bashids](https://github.com/benwilber/bashids)

# usage: bashids (-e|-d) [-s SALT -l MIN_LENGTH -a ALPHABET] (hashid|ints)
#     -e <encode>
#     -d <decode>
#     -s SALT (default: "")
#     -l MIN_LENGTH (default: 0)
#     -a ALPHABET (default: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890)
#     -h <help>
# 
# Example:
# 
#   Encoding:
#   $ bashids -e -s MySalt 25 46 57
#   1liJyCK1
# 
#   Decoding:
#   $ bashids -d -s MySalt 1liJyCK1
#   25
#   46
#   57

DO_ENCODE=1
BASHID="src/bashids/bashids" 

# http://wiki.bash-hackers.org/howto/getopts_tutorial
while getopts ":hvd" opt; do
  case $opt in
    h)
      echo "$USAGE"
      exit 0
      ;;
    d)  
      DO_ENCODE=0
      ;;
    v)  
      VERBOSE=1
      ;;
#    f) # example of value argument
#      FILTER=$OPTARG
#      >&2 echo "Setting memory $MEMGB Gb"
#      ;;
    \?)
      >&2 echo "Invalid option: -$OPTARG"
      echo "$USAGE"
      exit 1
      ;;
    :)
      >&2 echo "Option -$OPTARG requires an argument."
      echo "$USAGE"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

if [ "$#" -ne 1 ]; then
    >&2 echo Error: Wrong number of arguments
    echo "$USAGE"
    exit 1
fi

CPT_ID=$1

if [ ! -x $BASHID ]; then
    >&2 echo ERROR: $BASHID not found or not executable
    exit 1
fi

if [ $DO_ENCODE == 1 ]; then
    CODE=$(get_CPT_encode $CPT_ID)
    test_exit_status

    echo $CODE
else
    CODE=$(get_CPT_decode $CPT_ID)
    test_exit_status

    echo $CODE

fi
